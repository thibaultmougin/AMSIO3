Processes :1
It. max :  10
Dt :       6.21887e-07

Process 0
  Internal domain :   [0.0025, 0.9975] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [1 ... 399] x [1 ... 399] x [1 ... 399]

  temps init     0.417827 s

iteration     0  variation      60005.3  temps calcul    1.60837 s  comm.  0.0023768 s
iteration     1  variation        34087  temps calcul    1.67739 s  comm.  0.0020311 s
iteration     2  variation      25299.5  temps calcul    1.67737 s  comm.  0.0019803 s
iteration     3  variation      20614.9  temps calcul    1.58716 s  comm.   0.001862 s
iteration     4  variation      17766.9  temps calcul     1.5731 s  comm.  0.0030619 s
iteration     5  variation      15831.4  temps calcul    1.54791 s  comm.  0.0019171 s
iteration     6  variation      14419.7  temps calcul    1.58783 s  comm.  0.0026904 s
iteration     7  variation      13334.8  temps calcul    1.59584 s  comm.  0.0019232 s
iteration     8  variation      12468.4  temps calcul    1.68428 s  comm.  0.0021561 s
iteration     9  variation      11755.6  temps calcul    1.91383 s  comm.  0.0024314 s

             temps total      17.168 s

Processes :1
It. max :  10
Dt :       6.21887e-07

Process 0
  Internal domain :   [0.0025, 0.9975] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [1 ... 399] x [1 ... 399] x [1 ... 399]

  temps init     0.501482 s

iteration     0  variation      60005.3  temps calcul    2.11267 s  comm.  0.0029302 s
iteration     1  variation        34087  temps calcul    1.63478 s  comm.  0.0022033 s
iteration     2  variation      25299.5  temps calcul    1.55661 s  comm.   0.002408 s
iteration     3  variation      20614.9  temps calcul    1.58865 s  comm.  0.0018944 s
iteration     4  variation      17766.9  temps calcul    1.56101 s  comm.  0.0018413 s
iteration     5  variation      15831.4  temps calcul    1.58257 s  comm.  0.0020724 s
iteration     6  variation      14419.7  temps calcul     1.5496 s  comm.  0.0024659 s
iteration     7  variation      13334.8  temps calcul    1.54994 s  comm.   0.001992 s
iteration     8  variation      12468.4  temps calcul    1.55617 s  comm.  0.0032744 s
iteration     9  variation      11755.6  temps calcul    1.62336 s  comm.  0.0018152 s

             temps total     17.1173 s

Processes :2
It. max :  10
Dt :       6.21887e-07

Process 0
  Internal domain :   [0.0025, 0.4975] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [1 ... 199] x [1 ... 399] x [1 ... 399]
Process 1
  Internal domain :   [0.5, 0.9975] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [200 ... 399] x [1 ... 399] x [1 ... 399]

  temps init     0.381546 s

iteration     0  variation      60005.3  temps calcul    0.90498 s  comm.  0.0023851 s
iteration     1  variation        34087  temps calcul    0.91194 s  comm.  0.0013178 s
iteration     2  variation      25299.5  temps calcul   0.968312 s  comm.   0.002875 s
iteration     3  variation      20614.9  temps calcul   0.879206 s  comm.   0.000957 s
iteration     4  variation      17766.9  temps calcul   0.865483 s  comm.  0.0016612 s
iteration     5  variation      15831.4  temps calcul   0.873525 s  comm.  0.0010083 s
iteration     6  variation      14419.7  temps calcul   0.878121 s  comm.  0.0011071 s
iteration     7  variation      13334.8  temps calcul   0.877887 s  comm.  0.0043749 s
iteration     8  variation      12468.4  temps calcul   0.877886 s  comm.   0.002241 s
iteration     9  variation      11755.6  temps calcul   0.911617 s  comm.  0.0010004 s

             temps total     9.64082 s

Processes :4
It. max :  10
Dt :       6.21887e-07

Process 0
  Internal domain :   [0.0025, 0.2475] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [1 ... 99] x [1 ... 399] x [1 ... 399]
Process 1
  Internal domain :   [0.25, 0.495] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [100 ... 198] x [1 ... 399] x [1 ... 399]
Process 2
  Internal domain :   [0.4975, 0.7425] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [199 ... 297] x [1 ... 399] x [1 ... 399]
Process 3
  Internal domain :   [0.745, 0.9975] x [0.0025, 0.9975] x [0.0025, 0.9975]
  Point indices   :   [298 ... 399] x [1 ... 399] x [1 ... 399]

  temps init     0.267999 s

iteration     0  variation      60005.3  temps calcul   0.550324 s  comm.  0.0024127 s
iteration     1  variation        34087  temps calcul   0.558729 s  comm.  0.0036847 s
iteration     2  variation      25299.5  temps calcul   0.519683 s  comm.  0.0045953 s
iteration     3  variation      20614.9  temps calcul   0.570453 s  comm.  0.0012592 s
iteration     4  variation      17766.9  temps calcul   0.517753 s  comm.  0.0016842 s
iteration     5  variation      15831.4  temps calcul   0.575085 s  comm.  0.0015624 s
iteration     6  variation      14419.7  temps calcul   0.541415 s  comm.  0.0012449 s
iteration     7  variation      13334.8  temps calcul    0.57671 s  comm.  0.0016897 s
iteration     8  variation      12468.4  temps calcul    0.53777 s  comm.  0.0026246 s
iteration     9  variation      11755.6  temps calcul   0.505295 s  comm.  0.0028984 s

             temps total     6.04647 s

--------------------------------------------------------------------------
There are not enough slots available in the system to satisfy the 8
slots that were requested by the application:

  /home/tmougin/cours/TP-AMSIO3/TP2/PoissonMPI_OpenMP/install/PoissonMPI_OpenMP

Either request fewer slots for your application, or make more slots
available for use.

A "slot" is the Open MPI term for an allocatable unit where we can
launch a process.  The number of slots available are defined by the
environment in which Open MPI processes are run:

  1. Hostfile, via "slots=N" clauses (N defaults to number of
     processor cores if not provided)
  2. The --host command line parameter, via a ":N" suffix on the
     hostname (N defaults to 1 if not provided)
  3. Resource manager (e.g., SLURM, PBS/Torque, LSF, etc.)
  4. If none of a hostfile, the --host command line parameter, or an
     RM is present, Open MPI defaults to the number of processor cores

In all the above cases, if you want Open MPI to default to the number
of hardware threads instead of the number of processor cores, use the
--use-hwthread-cpus option.

Alternatively, you can use the --oversubscribe option to ignore the
number of available slots when deciding the number of processes to
launch.
--------------------------------------------------------------------------

processes :           1           2           4
threads   :          17           9           6
temps     :      16.315       8.949       5.453
speedups  :       1.000       1.823       2.992
last diff :   11755.559   11755.559   11755.559


processes :           1           2           4
threads   :          17           9           6
temps     :      16.315       8.949       5.453
speedups  :       1.000       1.823       2.992
last diff :   11755.559   11755.559   11755.559

